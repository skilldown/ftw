
We need to serve files sometimes.

* Usage

#+BEGIN_SRC scheme :tangle "../../ftw/httpd/handle-file-test.ss"
  (export #t)
  (import :ftw/server :ftw/server/handle-file
          :clan/base :std/net/request :std/generic)

  (defclass (test-handle-file-server ftw-server)
    (not-found))

  (def test-file-text "This is a test file")

  (def test-file-path "/tmp/handle-file.txt")

  (def (make-test-file)
    (call-with-output-file test-file-path
      (λ (p) (display test-file-text p))))

  (defmethod (ftw-server-handler (test test-handle-file-server))
    (λ (req res)
      (unless (@ test not-found) (make-test-file))
      ((static-file-handler test-file-path
                            buffer-length: 10) req res)
      (delete-file test-file-path)))


  (def (test)
    (def server (make-test-handle-file-server
                 address: "localhost:8242"))

    (def (test-static-file)
      (let (response (http-get "http://localhost:8242/"))
        (values (and
                  (equal? (request-text response)
                          test-file-text)
                  (equal? 200 (request-status response)))
                (request-status response)
                (request-text response)
                (request-headers response)
                response)))

    (def (test-not-found)
      (set! (@ server not-found) #t)
      (let (response (http-get "http://localhost:8242/"))
        (values (and              
                  (equal? 404 (request-status response)))
                (request-status response)
                (request-text response)
                (request-headers response)
                response)))
      

    
    (start-ftw-server! server)

    (let (response (http-get "http://localhost:8242/"))
      (begin0 [(cons static-file: (values->list (test-static-file)))
               (cons not-found: (values->list (test-not-found)))]
        (stop-ftw-server! server))))
            
#+END_SRC

* Testing

#+BEGIN_SRC scheme
  (add-load-path "~/src/ftw/gerbil/")
  (import (rename-in (prefix-in :test/ftw/server/handle-file test-handle-file-)
                     (test-handle-file-test test-handle-file)))

  (test-handle-file)

#+END_SRC

* file: ftw/server/handle-file.ss

#+BEGIN_SRC scheme :tangle "../../ftw/httpd/handle-file.ss" :padline no
  ;;; -*- Gerbil -*-
  (export static-file-handler)

  (import :ftw/http-status-code :ftw/file
          :clan/base
          :gerbil/gambit/bytes :gerbil/gambit/os
          :std/net/httpd :std/generic :std/sugar :std/pregexp :std/srfi/1)

  (def (static-file-handler
        pathname
        content-type: (content-type #f)
        content-disposition: (content-disposition "attachment")
        filename: (filename #t)
        last-modified: (last-modified #f)
        buffer-length: (buffer-length 8192))
    (if (not (file-exists? pathname))
      (λ (req res)
        (http-response-write
         res +http-not-found+ '(("Content-Type" . "text/plain"))
         (http-status-code-message +http-not-found+)))
      (λ (req res)
          
        (unless content-type
          (set! content-type (file-content-type pathname)))

        (unless last-modified
          (set! last-modified (file-modification-rfc-1123-date pathname)))

        (when filename
          (set! content-disposition
              (call-with-output-string
               (string-append content-disposition "; filename=")
               (λ (p) (write (cond ((string? filename) filename)
                                   ((eq? #t filename)
                                    (file-name pathname)))
                             p)))))

        (def size (number->string (file-size pathname)))
          

        (def headers [["Last-Modified" . last-modified]
                      ["Content-Length"  . size]
                      ["Content-Type"  . content-type]
                      ["Content-Disposition"  . content-disposition]
                      ["Accept-Ranges" . "none"]])

        
        (def chunk (make-bytes buffer-length))

        ;; Begin response
        (http-response-begin res +http-ok+ headers)

        ;; Blow some chunks
        (call-with-input-file pathname
          (lambda (p)
            (let loop ()
              (let (len (read-bytes chunk p))           
                (unless (= len buffer-length)
                  (bytes-shrink! chunk len))
                (http-response-chunk res chunk)
                (when (= len buffer-length)
                  (loop))))))
        ;; End the response
        (http-response-end res))))

#+END_SRC



